generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model blog {
  BlogName   String?   @db.VarChar(50)
  BlogID     Int       @id @default(autoincrement())
  Content    String?   @db.VarChar(50)
  Date       DateTime? @db.Date
  Img        String?   @db.VarChar(50)
  UserID     Int?
  CategoryID Int?

  @@index([CategoryID], map: "IXFK_Blog_Blog Category")
  @@index([UserID], map: "IXFK_Blog_User")
}

model blog_category {
  CategoryID   Int     @id @default(autoincrement())
  CategoryName String? @db.VarChar(50)

  @@map("blog category")
}

model blog_tag {
  TagID         Int     @id @default(autoincrement())
  TagName       String? @db.VarChar(50)
  BlogTagBlogID Int?

  @@map("blog tag")
}

model blogtagblog {
  BlogTagBlogID Int @id @default(autoincrement())
  TagID         Int
  BlogID        Int

  @@index([BlogID], map: "IXFK_BlogTagBlog_Blog")
}

model order {
  OrderId   Int     @id @default(autoincrement())
  UserID    Int
  OrderDate DateTime? @db.Date
  Status    String? @db.VarChar(50)
  Total     Float?

  @@index([UserID], map: "FK_Order_User")
}

model order_product {
  OrderId        Int
  Qunatity       Int
  orderProductID Int @id @default(autoincrement())
  ProductId      Int

  @@index([OrderId], map: "IXFK_Order Product_Order")
  @@map("order product")
}

model product {
  BrandId           Int
  CategoryId        Int
  ProductId         Int      @id @default(autoincrement())
  category   product_category  @relation(fields: [CategoryId], references: [CategoryId])
  ProductName       String   @db.VarChar(50)
  Price             Float?
  Short_Description String?  @map("Short Description") @db.VarChar(50)
  Long_Description  String?  @map("Long Description") @db.VarChar(50)
  Discount_Amount   String?  @map("Discount Amount") @db.VarChar(50)
  VAT               Boolean
  Show_price        Boolean? @map("Show price")
  Model             String?  @db.VarChar(50)
  img               String?  @db.VarChar(50)
  orderProductID    Int?

  @@index([orderProductID], map: "IXFK_Product_Order Product")
  @@index([BrandId], map: "IXFK_Product_Product Brand")
  @@index([CategoryId], map: "IXFK_Product_Product Category")
}

model product_brand {
  BrandId   Int     @id @default(autoincrement())
  BrandName String? @db.VarChar(50)

  @@map("product brand")
}

model product_category {
  CategoryId   Int    @id @default(autoincrement())
  CategoryName String @db.VarChar(50)
  parentId  Int?      // Nullable parentId for subcategories
  parent    product_category? @relation("CategoryToCategory", fields: [parentId], references: [CategoryId])
  children  product_category[] @relation("CategoryToCategory")
  products  product[]
  @@map("product category")
}

model product_specification {
  Specification_Name   String @map("Specification Name") @db.VarChar(50)
  ProductId            Int
  Specification_Detail String @map("Specification Detail") @db.VarChar(50)
  SpecificationId      Int    @id @default(autoincrement())

  @@index([ProductId], map: "IXFK_Product specification_Product")
  @@map("product specification")
}

model product_tag {
  productTagId   Int    @id @default(autoincrement())
  ProductTagName String @db.VarChar(50)
  ProductId      Int

  @@map("product tag")
}

model producttagproduct {
  productTagId        Int
  ProductTagProductID Int @id @default(autoincrement())
  ProductId           Int

  @@index([ProductId], map: "IXFK_ProductTagProduct_Product")
  @@index([productTagId], map: "IXFK_ProductTagProduct_Product Tag")
}

model review {
  reviewId          Int      @id @default(autoincrement())
  UserID            Int
  reviewDate        DateTime @db.Date
  ProductId         Int
  reviewDescription String   @db.VarChar(50)
  rating            Float

  @@index([UserID], map: "FK_Review_User")
}

model role {
  RoleID   Int     @id @default(autoincrement())
  RoleName String? @unique(map: "UniqueName") @db.VarChar(50)
}

model user {
  RoleID      Int
  UserID      Int       @id @default(autoincrement())
  UserName    String?   @unique(map: "UniqueUserName") @db.VarChar(50)
  Password    String?   @db.VarChar(450)
  Email       String?   @unique(map: "UniqueEmail") @db.VarChar(50)
  PhoneNumber String?   @db.VarChar(50)
  Gender      Gender?   @default(None)
  DateOfBirth DateTime? @db.Date

  @@index([RoleID], map: "FK_User_Role")
}

model useraddress {
  UserAddressId Int     @id @default(autoincrement())
  Address       String? @db.VarChar(50)
  Road          String? @db.VarChar(50)
  UserID        Int @unique
  Block         String? @db.VarChar(50)
  Area          String? @db.VarChar(50)

  @@index([UserID], map: "FK_UserAddress_User")
}

enum Gender {
  Male
  Female
  None
}